package main

import (
	"fmt"
	"math/rand"
)

// Words and their meanings
// pseudorandom
//   (of a number, a sequence of numbers, or any digital data or entities) satisfying one or
//   more statistical tests for randomness but produced by one of the following:
//     1. a definite mathematical procedure (AHD)
//     2. a definite, nonrandom computational process (Webster)
//     3. a definite computational procedure (Oxford)
//   a pseudorandom process produces predicable outcomes given information (inital seed) which
//   is typically difficult to acquire;
// pseudorandom number
//     a sequence of numbers whose properties approximate the properties of sequences of
//     random numbers, generated by PRNG
// pseudorandom number generator (PRNG)
//     a computer program or algorithm for generating pseudorandom numbers

// (sequence generated by PRNG/pseudorandom numbers are) not truly random, because it is completely
// determined by an initial value, called the PRNG's seed (which may include truly random values)

// see more at https://en.wikipedia.org/wiki/Pseudorandom_number_generator

// Go's description of package math.rand
// Random numbers are generated by a Source.
// Top-level functions, such as Float64 and Int, use a default shared Source
// that produces a deterministic sequence of values each time a program is run.
// Use the Seed function to initialize the default Source if different behavior
// is required for each run.
// The default Source is safe for concurrent use by multiple goroutines,
// but Sources created by NewSource are not.
func main() {
	// pseudorandom number
	// the result is always the same each time you run the program
	// no matter where the program/function (rand1/rand2) is run (machine irrelavant)
	// however, the same call to rand.Intn(x) with the same arg yields different result
	// when the call is in a sequence of calls in a different order
	// compare result in random2.go
	fmt.Printf("rand.Intn(10) => %v\n", rand.Intn(10))     // 1
	fmt.Printf("rand.Intn(180) => %v\n", rand.Intn(180))   // 87
	fmt.Printf("rand.Intn(5000) => %v\n", rand.Intn(5000)) // 1847
	for i := 0; i < 30; i++ {
		fmt.Printf("%v", rand.Intn(4))
	} // 312100023210231123202333023103
}
